{"version":3,"sources":["SelectedLine.js","App.js","serviceWorker.js","index.js"],"names":["SelectedLine","props","useState","lines","setLines","setLineId","err","setErr","loaded","setLoaded","useEffect","select","fetch","then","res","json","data","catch","onChange","event","target","value","console","log","map","line","index","key","id","App","fetchData","setFetchData","setSelect","className","element","modeName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8QA0CeA,G,YAvCM,SAACC,GAAW,IAAD,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEAF,mBAAS,MAFT,mBAEbG,GAFa,aAGNH,oBAAS,GAHH,mBAGrBI,EAHqB,KAGhBC,EAHgB,OAIAL,oBAAS,GAJT,mBAIrBM,EAJqB,KAIbC,EAJa,KAK3BC,qBAAU,WACHT,EAAMU,SACTF,GAAU,GACXG,MAAM,oCAAD,OAAqCX,EAAMU,SAC/CE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUZ,EAASY,MACxBH,MAAK,WAAMJ,GAAU,MACrBQ,OAAM,SAACX,GAAD,OAASC,EAAOD,SAEtB,CAACL,EAAMU,SASZ,OACI,6BACI,4BAAQO,SANM,SAACC,GACnBd,EAAiC,6BAAvBc,EAAMC,OAAOC,MAAuC,mBAAoBF,EAAMC,OAAOC,SAKzDC,QAAQC,IAAIpB,GAC1C,qDACCA,EAAMqB,KAAI,SAACC,EAAMC,GAElB,OAAO,4BAAQC,IAAKD,GAAQD,EAAKG,QAInCpB,EAA4BF,EAAM,mCAAe,GAAxC,0CCORuB,MAtCf,WAAgB,IAAD,EACqB3B,mBAAS,IAD9B,mBACN4B,EADM,KACKC,EADL,OAEe7B,mBAAS,MAFxB,mBAENS,EAFM,KAEEqB,EAFF,KAYb,OATAtB,qBAAU,WACRE,MAAM,0CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUe,EAAaf,QAC9B,IAMD,yBAAKiB,UAAU,aACb,yBAAKA,UAAU,eACb,4BAAQA,UAAU,8BAAlB,aACA,0BAAMA,UAAU,aACd,yBAAKA,UAAU,yBACb,4BAAQA,UAAU,uBAAuBf,SAV7B,SAACC,GACrBa,EAAiC,6BAAvBb,EAAMC,OAAOC,MAAuC,KAAOF,EAAMC,OAAOC,SAUxE,4DACCS,EAAUN,KAAI,SAACU,EAASR,GAEvB,OAAO,4BAAQC,IAAKD,GAAQQ,EAAQC,cAIxC,yCAAexB,GACf,kBAAC,EAAD,CAAcA,OAAQA,SCpBdyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.5822a033.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\n\n\nconst SelectedLine = (props) => {\n    const [lines, setLines] = useState([]);\n    const [lineId, setLineId] = useState(null);\n    const [err, setErr] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n     useEffect(() => {\n         if(props.select) {\n         setLoaded(false)\n        fetch(`https://api.tfl.gov.uk/Line/Mode/${props.select}`)\n        .then((res) => res.json())\n        .then((data) => setLines(data))\n        .then(() =>{setLoaded(true)})\n        .catch((err) => setErr(err));\n         \n     }}, [props.select]);\n    \n      \n    \n\n    const changeHandler = (event) => {\n        setLineId(event.target.value === \"Choose kind of Transport\" ? \"Choose Your Line\": event.target.value)\n   }    \n\n    return(\n        <div>\n            <select onChange={changeHandler}>{console.log(lines)}\n                <option> Choose Your Line</option>\n                {lines.map((line, index) => {\n                    \n                return <option key={index}>{line.id}</option>\n                    })\n                }\n            </select>\n            {!loaded ? <h1>loading</h1> : err ? <h3>404</h3> : \"\"}\n        </div>\n        \n    )\n    \n}\nexport default SelectedLine;","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport'./grid.css';\nimport SelectedLine from './SelectedLine';\n\nfunction App() {\n  const [fetchData, setFetchData] = useState([]);\n  const [select, setSelect] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.tfl.gov.uk/Line/Meta/Modes\")\n      .then((res) => res.json())\n      .then((data) => setFetchData(data));\n  }, []);\n  const changeHandler = (event) => {\n    setSelect(event.target.value === \"Choose kind of Transport\" ? null : event.target.value)\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row div-row\">\n        <header className=\"lg-col-12 sm-col-12 header\">Transport</header>\n        <main className=\"lg-col-12\">\n          <div className=\"div-box lg-col-12 row\">\n            <select className=\"lg-cal-12 select-div\" onChange={changeHandler} >\n              <option>Choose kind of Transport</option>\n              {fetchData.map((element, index) => {\n              \n                return <option key={index}>{element.modeName}</option>\n                })\n              }\n            </select>\n            <div>SELECTED:{select}</div>\n            <SelectedLine select={select}/>\n            \n          </div>\n\n        </main>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}